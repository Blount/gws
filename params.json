{"name":"gws","tagline":"A helper to manage workspaces composed of git repositories.","body":"gws\r\n===\r\n\r\n`gws` is a KISS, bash, colorful, vundle-inspired helper to manage workspaces\r\ncomposed of git repositories.\r\n\r\n![gws update view](http://streakycobra.github.io/gws/images/gws_update.png)\r\n\r\n![gws status view](http://streakycobra.github.io/gws/images/gws_status.png)\r\n\r\n![gws check view](http://streakycobra.github.io/gws/images/gws_check.png)\r\n\r\nQuickStart\r\n----------\r\n\r\n  * Create a file named `.projects.gws` in the desired folder.\r\n  * Fill it with the projects informations (see below).\r\n  * Get all repositories with `gws update`.\r\n  * Hack a little bit.\r\n  * Show the status of the workspace with `gws` (`gws status` also works).\r\n\r\nHow it works\r\n------------\r\n\r\nThis tool offers some functionalities, among which:\r\n\r\n  * It uses a list of projects, named `.projects.gws`, containing many projects\r\n    described by their names, their repository urls, and optionaly an upstream\r\n    url (mapped as a git remote named `upstream`), like:\r\n\r\n        work/theSoftware | git@github.com:You/theSoftware.git\r\n        perso/gws        | git@github.com:You/gws.git         | git@github.com:StreakyCobra/gws.git\r\n\r\n  * It can use an ignore list, named `.ignore.gws`, containing regular\r\n    expressions which discard some specific projects, for instance to disable on\r\n    your home computer the work-related projects.\r\n\r\n        ^work/\r\n\r\n  * It can clone non-existing repositories from the projects list (but not\r\n    supress them in case of removal, you have to do it yourself for safety\r\n    reason. Notice that there is the `check` functionnality to identify\r\n    unlisted repositories).\r\n\r\n        gws update\r\n\r\n  * It can monitor all listed repositories in one command (uncommitted changes,\r\n    untracked changes, branches not synced with origin, ...).\r\n\r\n        gws status\r\n\r\n    or simply\r\n\r\n        gws\r\n\r\n  * It can check the workspace for all repositories (known, unknown, ignored,\r\n    missing). Note: This command can be quite slow in large repositories (e.g.\r\n    home folder, because it need to search entire space for unknown repository.\r\n\r\n        gws check\r\n\r\n\r\nSyntaxes\r\n--------\r\n\r\n### .projects.gws\r\n\r\nOne project per line. Must be of the form:\r\n\r\n    name | url\r\n\r\nor\r\n\r\n    name | url | upstream\r\n\r\nknowing that:\r\n\r\n  * There can be blank lines, but no comments or anything else.\r\n\r\n  * The name can be anything not containing `|`. Use `/` to group projects in\r\n    a folder hierarchy.\r\n\r\n  * The urls are passed to git as-is, so can be anything accepted by git, but\r\n    must not contain `|`.\r\n\r\n### .ignore.gws\r\n\r\nOne regular expression per line. The regular expression will be matched to\r\nprojects name. Some examples:\r\n\r\n  * Ignore the folder `work` and all its subfolders:\r\n\r\n        ^work/\r\n\r\n  * Ignore all repositories ending with `-work`:\r\n\r\n        -work$\r\n\r\n  * Ignore all repo containing an `a` inside:\r\n\r\n        a\r\n\r\nSome misc informations\r\n----------------------\r\n\r\n  * Except for cloning repositories, this script has not for goal to interact\r\n    with your repositories. So no `pull all`, `push all`, `delete all unused`,\r\n    functionnality will be implemented. This will imply too much checking to\r\n    ensure no loose of informations. Instead, just look the satus of\r\n    the repositories and do needed actions manually on regulare basis.\r\n\r\n  * You can use the commands from any subfolder of the workspace (as git does\r\n    for instance).\r\n\r\n  * The file `.projects.gws` can easily be verisonned to sync the list of\r\n    projects on which you are working between different computers.\r\n\r\n  * The file `.ignore.gws` permit to keep the same list on all computer, but to\r\n    localy disable some projects (for instance work-related projects at home\r\n    because they are unneeded or even not accessible).\r\n\r\n  * `gws check` can be quite slow (for instance if the workspace is the home\r\n    folder) because it searches all existing git projects recursively.\r\n\r\nFuture\r\n------\r\n\r\nThis project aims to stay simple. I will try to keep the project as alive as\r\npossible for a bash script, by correcting bugs and maybe some improvements.\r\nAlso, maybe one day, if I have time, I will rewrite all this script in python or\r\nother more maintainable language.\r\n\r\nContext\r\n-------\r\n\r\nIf you are, like me, a Linux programmer/hacker/coder who use heavily git, you\r\ncertainly have a directory in your home folder named `dev`, `workspace`, `code`\r\nor something else that contains all the projects you are working on. For\r\ninstance my currently is:\r\n\r\n    dev\r\n    ├── archlinux\r\n    │   ├── aur\r\n    │   └── habs\r\n    ├── perso\r\n    │   ├── gws\r\n    │   ├── imaxplore\r\n    │   └── teafree\r\n    ├── config\r\n\r\nwhere `aur`, `habs`, `gws`, `imaxplore`, `teafree`, `config` are git\r\nrepositories.\r\n\r\nSince I use at least two different computers, one laptop and one at work, I like\r\nto have the same folder structure on both. Of course remembering which project\r\nwas added recently and in which folder is tedious.\r\n\r\nSo I started to thing about using git submodules to register all projects on\r\nwhich I am working and syncing them with git between the two computers. But\r\nclearly git submodules are not usable because they are working on specific\r\ncommit and are not following branches.\r\n\r\nNo worry. The problem is pretty trivial, so I decided to start write a little\r\nbash script that read a simple list of repositories, and clone them if they\r\ndon't exist. And then, commit by commit, the script as grown to finally become\r\na helper to sync, monitor and check workspaces.\r\n\r\nI thought it can be useful to other people, so I made a little cleanup, write\r\na small documentation, and there it is. I hope you will enjoy it!\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}